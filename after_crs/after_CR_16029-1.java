/*Fix EclipseTestCollector for Eclipse 3.6's JUnit lib.

Some method signatures have changed.

Change-Id:Iff11d8bc3ba670a59491f0b5ba50de8bad79c1bf*/




//Synthetic comment -- diff --git a/eclipse/plugins/com.android.ide.eclipse.tests/src/com/android/ide/eclipse/tests/EclipseTestCollector.java b/eclipse/plugins/com.android.ide.eclipse.tests/src/com/android/ide/eclipse/tests/EclipseTestCollector.java
//Synthetic comment -- index 5a413fa..6bbc955 100644

//Synthetic comment -- @@ -1,12 +1,12 @@
/*
* Copyright (C) 2008 The Android Open Source Project
 *
* Licensed under the Eclipse Public License, Version 1.0 (the "License"); you
* may not use this file except in compliance with the License. You may obtain a
* copy of the License at
 *
* http://www.eclipse.org/org/documents/epl-v10.php
 *
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
//Synthetic comment -- @@ -26,7 +26,7 @@

/**
* Class for collecting all test cases in an eclipse plugin
 *
*/
public class EclipseTestCollector {

//Synthetic comment -- @@ -34,29 +34,37 @@
* Constructor
*/
public EclipseTestCollector() {

}

/**
* Searches through given plugin, adding all TestCase classes to given suite
* @param suite - TestSuite to add to
* @param plugin - Plugin to search for tests
     * @param expectedPackage - expected package for tests. Only test classes
*  that start with this package name will be added to suite
*/
    @SuppressWarnings({"cast", "unchecked"})
public void addTestCases(TestSuite suite, Plugin plugin, String expectedPackage) {
if (plugin != null) {
Enumeration<?> entries = plugin.getBundle().findEntries("/", "*.class", true);

while (entries.hasMoreElements()) {
URL entry = (URL)entries.nextElement();
String filePath = entry.getPath().replace(".class", "");
try {
Class<?> testClass = getClass(filePath, expectedPackage);
if (isTestClass(testClass)) {
                      // In Eclipse 3.6 RCP Windows-x64, the signature has changed from
                      //    addTestSuite(Class)
                      // to:
                      //    addTestSuite(Class<? extends TestCase>)
                      // which is enough to create an error. To solve it, we cast into the
                      // generics expected by the JUnit framework used by 3.6 and suppress the
                      // warnings generated by the compiler under 3.5
                      suite.addTestSuite((Class<? extends TestCase>)testClass);
}
                }
catch (ClassNotFoundException e) {
// ignore, this is not the class we're looking for
//sLogger.log(Level.INFO, "Could not load class " + filePath);
//Synthetic comment -- @@ -64,7 +72,7 @@
}
}
}

/**
* Returns true if given class should be added to suite
*/
//Synthetic comment -- @@ -73,19 +81,27 @@
Modifier.isPublic(testClass.getModifiers()) &&
hasPublicConstructor(testClass);
}

/**
* Returns true if given class has a public constructor
*/
    @SuppressWarnings({"unchecked", "cast"})
protected boolean hasPublicConstructor(Class<?> testClass) {
try {
            // In Eclipse 3.6 RCP Windows-x64, the signature has changed from
            //    getTestConstructor(Class)
            // to:
            //    getTestConstructor(Class<? extends TestCase>)
            // which is enough to create an error. To solve it, we cast into the
            // generics expected by the JUnit framework used by 3.6 and suppress the
            // warnings generated by the compiler under 3.5
            TestSuite.getTestConstructor((Class<? extends TestCase>) testClass);
} catch(NoSuchMethodException e) {
return false;
}
return true;
}

/**
* Load the class given by the plugin aka bundle file path
* @param filePath - path of class in bundle
//Synthetic comment -- @@ -100,6 +116,6 @@
throw new ClassNotFoundException();
}
String packagePath = dotPath.substring(index);
        return Class.forName(packagePath);
}
}








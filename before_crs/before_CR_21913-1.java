/*Increase time interval in points provided to VelocityTracker

There are cases where motion events arrive at VelocityTracker very close
together in time (~1 ms), even though they are generated by hardware with
much more time between then (~10 ms).  In these cases, VelocityTracker can
be tweaked to treat these points with more time between them, to prevent
wildly incorrect velocities from being calculated.

Tweak the CTS test case to validate VelocityTracker with more realistic
time deltas between points.

Change-Id:I35137ad4ca6223aee0cbba5650672a04f7cea831*/
//Synthetic comment -- diff --git a/tests/tests/view/src/android/view/cts/VelocityTrackerTest.java b/tests/tests/view/src/android/view/cts/VelocityTrackerTest.java
//Synthetic comment -- index 3ba3a9b..35254b6 100644

//Synthetic comment -- @@ -96,10 +96,10 @@
VelocityTracker vt = VelocityTracker.obtain();
assertNotNull(vt);

        MotionEvent me = MotionEvent.obtain(0L, 1, 1, .0f, .0f, 0);

vt.clear();
        me.addBatch(2L, 2, 2, .0f, .0f, 0);
vt.addMovement(me);
vt.computeCurrentVelocity(1);
XVelocity = 2.0f;
//Synthetic comment -- @@ -112,7 +112,7 @@
assertEquals(XVelocity, vt.getXVelocity(), ERROR_TOLERANCE);
assertEquals(YVelocity, vt.getYVelocity(), ERROR_TOLERANCE);

        for (int i = 3; i < 10; i++) {
me.addBatch((long)i, (float)i, (float)i, .0f, .0f, 0);
}
vt.clear();
//Synthetic comment -- @@ -124,7 +124,7 @@
assertEquals(YVelocity, vt.getYVelocity(), ERROR_TOLERANCE);

vt.clear();
        me.addBatch(10L, 10, 10, .0f, .0f, 0);
vt.addMovement(me);
vt.computeCurrentVelocity(1);
XVelocity = 1.1562872f;








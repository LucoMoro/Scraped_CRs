/*Make the set of temporary fail causes configurable

With this patch it will be possible to customize which
PDP reject cause values should be treated as temporary,
i.e. letting the RetryManager try to recover the PDP.

Also adding a couple of fail causes used by the operator
requesting this feature in the first place.

Change-Id:I0afc26f096abf95bfbdcc74130cbef3121306f64*/
//Synthetic comment -- diff --git a/src/java/com/android/internal/telephony/DataConnection.java b/src/java/com/android/internal/telephony/DataConnection.java
//Synthetic comment -- index 9751040..68508ad 100644

//Synthetic comment -- @@ -121,6 +121,8 @@
SERVICE_OPTION_NOT_SUBSCRIBED(0x21),
SERVICE_OPTION_OUT_OF_ORDER(0x22),
NSAPI_IN_USE(0x23),
ONLY_IPV4_ALLOWED(0x32),
ONLY_IPV6_ALLOWED(0x33),
ONLY_SINGLE_BEARER_ALLOWED(0x34),
//Synthetic comment -- @@ -138,6 +140,7 @@

// Errors generated by the Framework
// specified here
UNKNOWN(0x10000),
RADIO_NOT_AVAILABLE(0x10001),
UNACCEPTABLE_NETWORK_PARAMETER(0x10002),
//Synthetic comment -- @@ -161,6 +164,7 @@
}

public boolean isPermanentFail() {
return (this == OPERATOR_BARRED) || (this == MISSING_UNKNOWN_APN) ||
(this == UNKNOWN_PDP_ADDRESS_TYPE) || (this == USER_AUTHENTICATION) ||
(this == SERVICE_OPTION_NOT_SUPPORTED) ||
//Synthetic comment -- @@ -168,6 +172,15 @@
(this == PROTOCOL_ERRORS);
}

public boolean isEventLoggable() {
return (this == OPERATOR_BARRED) || (this == INSUFFICIENT_RESOURCES) ||
(this == UNKNOWN_PDP_ADDRESS_TYPE) || (this == USER_AUTHENTICATION) ||
//Synthetic comment -- @@ -260,6 +273,26 @@

protected abstract void log(String s);

//***** Constructor
protected DataConnection(PhoneBase phone, String name, int id, RetryManager rm,
DataConnectionTracker dct) {








//Synthetic comment -- diff --git a/src/java/com/android/internal/telephony/gsm/GsmDataConnectionTracker.java b/src/java/com/android/internal/telephony/gsm/GsmDataConnectionTracker.java
//Synthetic comment -- index 9bacbae..773a547 100644

//Synthetic comment -- @@ -1418,7 +1418,7 @@
mPhone.notifyDataConnection(Phone.REASON_APN_FAILED, apnContext.getApnType());
return;
}
                if (mReregisterOnReconnectFailure) {
// We've re-registerd once now just retry forever.
apnContext.getDataConnection().retryForeverUsingLastTimeout();
} else {







